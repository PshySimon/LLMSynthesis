{
  "app_name": "mysql",
  "app_version": "5.7",
  "bottlenecks": [
    "未配置合适的缓冲池大小"
  ],
  "system": {
    "os_version": "openEuler 24.03 LTS",
    "cpu_info": "8 核 @ 2.4GHz",
    "memory_info": "16GB DDR4",
    "storage_type": "NVMe SSD",
    "network_info": "万兆以太网",
    "runtime_environment": "物理机"
  },
  "workload": {
    "system": {
      "cpu_utilization": "65%",
      "memory_utilization": "70%",
      "disk_iops": "8500",
      "disk_latency": "1.2ms",
      "network_throughput": "600MB/s",
      "context_switches_per_second": "12000"
    },
    "mysql": {
      "innodb_buffer_pool_hit_ratio": "85%",
      "innodb_buffer_pool_reads": "1500/s",
      "innodb_buffer_pool_pages_free": "500",
      "innodb_row_lock_waits": "45/s",
      "threads_running": "12",
      "slow_queries": "5/s",
      "query_cache_hit_ratio": "30%",
      "connections_usage": "80%"
    }
  },
  "config": {
    "innodb_buffer_pool_size": "8G",
    "innodb_log_file_size": "1G",
    "innodb_flush_method": "O_DIRECT",
    "innodb_io_capacity": "2000",
    "innodb_io_capacity_max": "4000",
    "query_cache_size": "0",
    "max_connections": "200",
    "innodb_thread_concurrency": "0",
    "innodb_read_io_threads": "8",
    "innodb_write_io_threads": "8"
  },
  "param_knowledge": "innodb_buffer_pool_size  \n- 控制 InnoDB 存储引擎用于缓存数据和索引的内存池大小；  \n- 推荐设置为物理内存的 50%~70%（需预留空间给操作系统及其他进程）；  \n- 是否动态生效：部分生效（修改后需重启实例完全生效，动态调整仅影响新增内存分配）；  \n- 影响维度：内存、IO（减少磁盘读写）；  \n\ninnodb_buffer_pool_instances  \n- 控制 InnoDB 缓冲池的分区数量，用于降低高并发下的内存争用；  \n- 推荐设置为 4~8（若缓冲池大小 ≥8GB），每个实例至少分配 1GB；  \n- 是否动态生效：否（需重启生效）；  \n- 影响维度：内存、CPU（提升多核并行性）；  \n\ninnodb_old_blocks_time  \n- 控制未被再次访问的数据页在缓冲池 LRU 列表中的保留时间，避免全表扫描污染缓存；  \n- 推荐设置为 1000（毫秒，适用于频繁扫描场景）；  \n- 是否动态生效：是；  \n- 影响维度：内存（提升缓存命中率）；  \n\ninnodb_flush_neighbors  \n- 控制 InnoDB 是否合并刷新相邻脏页（机械硬盘场景可提升 IO 效率）；  \n- 推荐设置为 0（SSD 场景禁用）或 1（机械硬盘启用）；  \n- 是否动态生效：是；  \n- 影响维度：IO（减少随机写开销）；  \n\ninnodb_io_capacity  \n- 控制 InnoDB 后台任务的 IO 吞吐量上限（如脏页刷新速率）；  \n- 推荐设置为存储设备 IOPS 的 50%~75%（如 SSD 可设 2000~4000）；  \n- 是否动态生效：是；  \n- 影响维度：IO、CPU（平衡后台任务与用户请求资源占用）；"
}