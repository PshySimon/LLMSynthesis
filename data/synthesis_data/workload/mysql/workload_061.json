{
  "app_name": "mysql",
  "app_version": "8.0",
  "bottlenecks": [
    "大事务导致锁持有时间过长"
  ],
  "system": {
    "os_version": "openEuler 24.03 LTS",
    "cpu_info": "8 核 @ 2.4GHz",
    "memory_info": "16GB DDR4",
    "storage_type": "NVMe SSD",
    "network_info": "万兆以太网",
    "runtime_environment": "Docker 容器"
  },
  "workload": {
    "system": {
      "cpu_utilization": "75%",
      "memory_utilization": "12GB (75%)",
      "disk_iops": "15,000",
      "disk_latency": "2ms",
      "network_throughput": "800MB/s"
    },
    "mysql": {
      "qps": "5,000",
      "tps": "1,200",
      "active_transactions": "45",
      "lock_wait_time": "1.5s",
      "innodb_buffer_pool_hit_rate": "95%",
      "slow_queries": "25 per hour"
    }
  },
  "config": {
    "innodb_buffer_pool_size": "8G",
    "innodb_log_file_size": "2G",
    "innodb_flush_log_at_trx_commit": "2",
    "innodb_lock_wait_timeout": "30",
    "innodb_deadlock_detect": "ON",
    "transaction_isolation": "READ-COMMITTED",
    "max_connections": "200",
    "binlog_format": "ROW"
  },
  "param_knowledge": "innodb_lock_wait_timeout  \n- 控制 InnoDB 事务等待行锁的最长时间（秒），超时后自动回滚；  \n- 推荐设置为 5-30（根据业务容忍度调整，OLTP系统建议较低）；  \n- 是否动态生效：是；  \n- 影响维度：锁竞争、事务吞吐量、响应时间；  \n\ninnodb_rollback_on_timeout  \n- 控制锁等待超时后是否回滚整个事务（而不仅是最后语句）；  \n- 推荐设置为 OFF（避免大事务完全回滚带来的开销）；  \n- 是否动态生效：否；  \n- 影响维度：事务原子性、回滚成本、系统稳定性；  \n\ninnodb_deadlock_detect  \n- 控制是否启用死锁检测机制；  \n- 推荐设置为 ON（高频小事务场景）或 OFF（明确无死锁的超大事务批处理）；  \n- 是否动态生效：是；  \n- 影响维度：CPU开销（检测算法消耗）、死锁处理延迟；  \n\ntransaction_isolation  \n- 控制事务隔离级别（如READ-COMMITTED/REPEATABLE-READ）；  \n- 推荐根据业务需求选择，高并发更新场景建议READ-COMMITTED；  \n- 是否动态生效：是（会话级）；  \n- 影响维度：锁粒度、并发性能、数据一致性；  \n\ninnodb_print_all_deadlocks  \n- 控制是否将所有死锁信息写入错误日志；  \n- 推荐临时调试时开启（生产环境通常关闭）；  \n- 是否动态生效：是；  \n- 影响维度：日志IO、故障诊断效率；"
}